#VPC creation
resource "aws_vpc" "main" {
 cidr_block = "10.0.0.0/16"

 tags = {
   Name = "Project VPC"
 }
}

#Creation of Public & private subnets-- Vars already declared in vars.tf file

resource "aws_subnet" "public_subnets" {
 count      = length(var.public_subnet_cidrs)
 vpc_id     = aws_vpc.main.id
 cidr_block = element(var.public_subnet_cidrs, count.index)

 tags = {
   Name = "Public Subnet ${count.index + 1}"
 }
}

resource "aws_subnet" "private_subnets" {
 count      = length(var.private_subnet_cidrs)
 vpc_id     = aws_vpc.main.id
 cidr_block = element(var.private_subnet_cidrs, count.index)

 tags = {
   Name = "Private Subnet ${count.index + 1}"
 }
}


#create eip
#resource "aws_eip" "lb" {
#  instance = "${var.AWS_INSTANCE}"
#  domain   = "vpc"
#}




resource "aws_internet_gateway" "gw" {
 vpc_id = aws_vpc.main.id

 tags = {
   Name = "Project VPC IG"
 }
}


resource "aws_route_table" "second_rt" {
 vpc_id = aws_vpc.main.id

 route {
   cidr_block = "0.0.0.0/0"
   gateway_id = aws_internet_gateway.gw.id
 }

 tags = {
   Name = "2nd Route Table"
 }
}


resource "aws_route_table_association" "public_subnet_asso" {
 count = length(var.public_subnet_cidrs)
 subnet_id      = element(aws_subnet.public_subnets[*].id, count.index)
 route_table_id = aws_route_table.second_rt.id
}

#Security Group
resource "aws_security_group" "main-sec-gp" {
egress = [
   {
   cidr_blocks     = ["0.0.0.0/0" , ]
   description      =  ""
   from_port        = 0
   ipv6_cidr_blocks = []
   prefix_list_ids  =[]
   protocol         = "-1"
   security_groups  = []
   self             = false
   to_port          = 0

}
]

ingress = [
  {
   cidr_blocks     = ["0.0.0.0/0" , ]
   description      =  ""
   from_port        = 22
   ipv6_cidr_blocks = []
   prefix_list_ids  = []
   protocol         = "tcp"
   security_groups  = []
   self             = false
   to_port          = 22
}

]


tags = {
   Name =  "TF-secgp"
}


}


